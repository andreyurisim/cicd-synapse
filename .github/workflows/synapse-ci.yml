name: synapse-ci

on:
  pull_request:
    branches:
      - dev
    paths:
      - 'synapse/**'

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev
    env:
      PROJECT_NAME: demo_cicd
      ENVIRONMENT_PREFIX: dev

    steps:
      - uses: actions/checkout@v2
      
      - name: Declare variables
        run: |
          echo "PROFILE_PATH=synapse/profiles/${{ env.ENVIRONMENT_PREFIX }}.publish.xml" >> $GITHUB_ENV
          echo "PROJECT_PATH=synapse/src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.sqlproj" >> $GITHUB_ENV
          echo "REPORT_PATH=synapse/src/${{ env.PROJECT_NAME }}/report" >> $GITHUB_ENV
          echo "DACPAC_PATH=synapse/src/${{ env.PROJECT_NAME }}/bin/Debug/${{ env.PROJECT_NAME }}.dacpac" >> $GITHUB_ENV

      - name: Install sqlpackage
        run: |
          curl -Lo sqlpackage-linux.zip https://aka.ms/sqlpackage-linux
          unzip -o sqlpackage-linux.zip -d /opt/sqlpackage/
          chmod +x /opt/sqlpackage/*
          sudo rm -f /bin/sqlpackage
          sudo ln -s /opt/sqlpackage/sqlpackage /bin/sqlpackage
          sudo rm -rf sqlpackage-linux.zip

      - name: Install dotnet
        run: |
          wget https://packages.microsoft.com/config/ubuntu/21.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \
          sudo dpkg -i packages-microsoft-prod.deb && \
          rm packages-microsoft-prod.deb

          sudo apt update && \
            sudo apt install -y apt-transport-https && \
            sudo apt update && \
            sudo apt install -y dotnet-sdk-3.1

      - name: Install Azure Data Studio
        run: |
          curl -Lo azuredatastudio-linux.deb https://go.microsoft.com/fwlink/?linkid=2168339
          sudo dpkg -i azuredatastudio-linux.deb
          sudo rm -rf azuredatastudio-linux.deb
          sudo apt install -y libunwind8
          
          echo "NET_CORE_TARGETS_PATH=/usr/share/azuredatastudio/resources/app/extensions/mssql/sqltoolsservice/Linux/$(ls /usr/share/azuredatastudio/resources/app/extensions/mssql/sqltoolsservice/Linux/ | head -n1)" >> $GITHUB_ENV

      - name: Build dacpac
        run: dotnet build "${PROJECT_PATH}" /p:NetCoreBuild=true /p:NETCoreTargetsPath="${NET_CORE_TARGETS_PATH}"
        
      - name: Upload .dacpac
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ${{ env.DACPAC_PATH }}
      
      # - name: Azure Login
      #   uses: Azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      #     enable-AzPSSession: true

      # - name: Adquiring access token
      #   shell: pwsh
      #   run: |
      #     Set-PSRepository PSGallery -InstallationPolicy Trusted
      #     Install-Module -Name Az.Accounts -AllowClobber -Force
      #     $context = Get-AzContext
      #     $sqlToken = (Get-AzAccessToken -ResourceUrl "https://database.windows.net" -DefaultProfile $context).Token
          
      #     echo "SQL_TOKEN=$sqlToken" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Scheme compare
        run: |
          mkdir -p "${REPORT_PATH}"
          
          # Export deploy report
          sqlpackage \
            /Action:DeployReport \
            /Profile:"${PROFILE_PATH}" \
            /OutputPath:"${REPORT_PATH}/deploy_report.xml" \
            /OverwriteFiles:True \
            /SourceFile:"${DACPAC_PATH}" \
            /TargetServerName:${{ secrets.SERVER_NAME }} \
            /TargetDatabaseName:${{ secrets.SERVER_DATABASE }} \
            /TargetUser:${{ secrets.SERVER_USER_ID }} \
            /TargetPassword:${{ secrets.SERVER_PASSWORD }}

          # Export sql script
          sqlpackage \
            /Action:Script \
            /Profile:"${PROFILE_PATH}" \
            /OutputPath:"${REPORT_PATH}/deploy.sql" \
            /OverwriteFiles:True \
            /SourceFile:"${DACPAC_PATH}" \
            /TargetServerName:${{ secrets.SERVER_NAME }} \
            /TargetDatabaseName:${{ secrets.SERVER_DATABASE }} \
            /TargetUser:${{ secrets.SERVER_USER_ID }} \
            /TargetPassword:${{ secrets.SERVER_PASSWORD }}
      
      - name: Generate markdown report
        shell: pwsh
        run: |
          ${{ github.workspace }}/synapse/scripts/Parse-SqlProfileReport.ps1 ^
            -Environment "${{ env.ENVIRONMENT_PREFIX }}" ^
            -SqlPackageReport "${{ env.REPORT_PATH }}/deploy_report.xml" ^
            -OutputFilePath "${{ env.REPORT_PATH }}/deploy_report.md"

      - name: Upload report
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: ${{ env.REPORT_PATH }}


  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    env:
      PROJECT_NAME: demo_cicd
      ENVIRONMENT_PREFIX: dev

    steps:
      - uses: actions/checkout@v2
      
      - name: Declare variables
        run: |
          echo "PROFILE_PATH=synapse/profiles/${{ env.ENVIRONMENT_PREFIX }}.publish.xml" >> $GITHUB_ENV
          echo "PROJECT_PATH=synapse/src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.sqlproj" >> $GITHUB_ENV
          echo "REPORT_PATH=synapse/src/${{ env.PROJECT_NAME }}/report" >> $GITHUB_ENV
          echo "DACPAC_PATH=synapse/src/${{ env.PROJECT_NAME }}/bin/Debug/${{ env.PROJECT_NAME }}.dacpac" >> $GITHUB_ENV

      - name: Install sqlpackage
        run: |
          curl -Lo sqlpackage-linux.zip https://aka.ms/sqlpackage-linux
          unzip -o sqlpackage-linux.zip -d /opt/sqlpackage/
          chmod +x /opt/sqlpackage/*
          sudo rm -f /bin/sqlpackage
          sudo ln -s /opt/sqlpackage/sqlpackage /bin/sqlpackage
          sudo rm -rf sqlpackage-linux.zip

      - name: Install dotnet
        run: |
          wget https://packages.microsoft.com/config/ubuntu/21.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \
          sudo dpkg -i packages-microsoft-prod.deb && \
          rm packages-microsoft-prod.deb

          sudo apt update && \
            sudo apt install -y apt-transport-https && \
            sudo apt update && \
            sudo apt install -y dotnet-sdk-3.1

      - name: Install Azure Data Studio
        run: |
          curl -Lo azuredatastudio-linux.deb https://go.microsoft.com/fwlink/?linkid=2168339
          sudo dpkg -i azuredatastudio-linux.deb
          sudo rm -rf azuredatastudio-linux.deb
          sudo apt install -y libunwind8
          
          echo "NET_CORE_TARGETS_PATH=/usr/share/azuredatastudio/resources/app/extensions/mssql/sqltoolsservice/Linux/$(ls /usr/share/azuredatastudio/resources/app/extensions/mssql/sqltoolsservice/Linux/ | head -n1)" >> $GITHUB_ENV

      - name: Build dacpac
        run: dotnet build "${PROJECT_PATH}" /p:NetCoreBuild=true /p:NETCoreTargetsPath="${NET_CORE_TARGETS_PATH}"
      
      # - name: Azure Login
      #   uses: Azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      #     enable-AzPSSession: true

      # - name: Adquiring access token
      #   shell: pwsh
      #   run: |
      #     Set-PSRepository PSGallery -InstallationPolicy Trusted
      #     Install-Module -Name Az.Accounts -AllowClobber -Force
      #     $context = Get-AzContext
      #     $sqlToken = (Get-AzAccessToken -ResourceUrl "https://database.windows.net" -DefaultProfile $context).Token
          
      #     echo "SQL_TOKEN=$sqlToken" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      # - name: Publish .dacpac
      #   run: |
      #     sqlpackage \
      #       /Action:Publish \
      #       /Profile:"${PROFILE_PATH}" \
      #       /SourceFile:"${DACPAC_PATH}" \
      #       /TargetServerName:${{ secrets.SERVER_NAME }} \
      #       /TargetUser:${{ secrets.SERVER_USER_ID }} \
      #       /TargetPassword:${{ secrets.SERVER_PASSWORD }}
